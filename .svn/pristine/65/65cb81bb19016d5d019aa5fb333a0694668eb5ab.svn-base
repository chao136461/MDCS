package avicit.discussion_manage.structureDataSynchronize.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.Principal;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletInputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import avicit.discussion_manage.structuralrelationship.service.StructuralRelationshipService;
import avicit.discussion_manage.structureDataSynchronize.dao.StructureDataSynchronizeDAO;
import avicit.discussion_manage.structureDataSynchronize.dto.WebserviceXmlStructureDTO;
import avicit.platform6.api.session.SessionHelper;
import avicit.platform6.commons.utils.ComUtil;
import avicit.platform6.core.exception.DaoException;
import avicit.platform6.core.shiroSecurity.contextThread.ContextCommonHolder;

/**
 * @classname:  StructureDataSynchronizeService
 * @description: 定义 结构关系数据同步实现类
 * @author:  heps
 */
@Service
public class StructureDataSynchronizeService {

	private static final Logger logger =  LoggerFactory.getLogger(StructuralRelationshipService.class);
	
	@Autowired
	private StructureDataSynchronizeDAO dao;

	public void  updateStructureDataSynchronize(String data)throws Exception{
		try {
				
			Vector<WebserviceXmlStructureDTO> vector = XmlStrBeanVectorWeberviceDataUtil.getXmlStrBeanVectorByWeberviceData(data);
			
			Iterator<WebserviceXmlStructureDTO>	iterator = vector.iterator();
		
			while(iterator.hasNext()){
				WebserviceXmlStructureDTO  dto = iterator.next();
				
				saveStructureData(dto);
				
				List<WebserviceXmlStructureDTO> subDtoList = dto.getSubparts();
				
				if(subDtoList.size() > 0){
					
					for (int i = 0; i < subDtoList.size(); i++) {
						
						WebserviceXmlStructureDTO subDto = subDtoList.get(i);
						
						saveStructureData(subDto);
					}
				}
			}
		}catch (Exception e) {
			logger.error("updateStructureDataSynchronize出错：", e);
			throw new DaoException(e.getMessage(),e);
		}
	}
	
	/**
	 * 同步零部件信息
	 * @param dto
	 */
	private void  saveStructureData(WebserviceXmlStructureDTO dto){
		
		 //分类编号
		String  classCode = dto.getClassCode();
		
		if(null != classCode && !"".equals(classCode)){
			//判断该零件是否存在
			String id = dao.findHasClassCode(classCode);
			
			if(null != id && !"".equals(id)){
				dto.setId(id);
				dao.updateStructureData(dto);
			}else{
				dto.setId(ComUtil.getId());
				dto.setRelationshipId(ComUtil.getId());
				dao.insertStructureData(dto);
			}
		}
	}
}
