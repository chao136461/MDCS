package avicit.discussion_manage.structuralrelationship.service;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import avicit.platform6.api.session.SessionHelper;
import avicit.platform6.core.exception.DaoException;
import avicit.platform6.core.mybatis.pagehelper.Page;
import avicit.platform6.core.mybatis.pagehelper.PageHelper;
import avicit.platform6.core.rest.msg.QueryReqBean;
import avicit.platform6.core.rest.msg.QueryRespBean;
import avicit.discussion_manage.structuralrelationship.dao.StructuralRelationshipDao;
import avicit.discussion_manage.structuralrelationship.dto.AddFormDataDTO;
import avicit.discussion_manage.structuralrelationship.dto.ZtreeNodesDTO;
import avicit.platform6.modules.system.syslog.service.SysLogUtil;

/**
 * @classname:  StructuralRelationshipService
 * @description: 定义 结构关系表实现类
 * @author:  AVICIT DEV
 */
@Service
public class StructuralRelationshipService{

	private static final Logger logger =  LoggerFactory.getLogger(StructuralRelationshipService.class);
	
	@Autowired
	private StructuralRelationshipDao dao;

	
	//插入数据
	public String insertStructuralRelationship(AddFormDataDTO dto,HttpServletRequest request) throws Exception{
		
		try{
			String designerId = SessionHelper.getLoginSysUserId(request);
			String clientIp = SessionHelper.getClientIp(request);
			dto.setDesignerId(designerId);
			dto.setLastUpdateIp(clientIp);
			dao.insertStructuralRelationship(dto);
			//记录日志
			SysLogUtil.log4Insert(dto);
			return dto.getReturnString();
		}catch(Exception e){
			logger.error("insertStructuralRelationship出错：", e);
			throw new DaoException(e.getMessage(),e);
		}	
	}
	
	
	/**
	 * 通过主键查询单条记录
	 * @param id
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public QueryRespBean<AddFormDataDTO> getDgStructuralRelationship(QueryReqBean<AddFormDataDTO> queryReqBean,String id) throws Exception {
		try{
			PageHelper.startPage(queryReqBean.getPageParameter());
			Page<AddFormDataDTO> dataList =  dao.getDgStructuralRelationship(id);
			QueryRespBean<AddFormDataDTO> queryRespBean =new QueryRespBean<AddFormDataDTO>();
			queryRespBean.setResult(dataList);
			return queryRespBean;
		}catch(Exception e){
			logger.error("getAddformDataDTOById出错：", e);
			throw new DaoException("",e);
		}
	}
	
	
	/**
	 * 通过零件查询单条记录
	 * @param id
	 * @return AddFormDataDTO
	 * @throws Exception
	 */
	public AddFormDataDTO getAddformDataDTOById(String id) throws Exception {
		try{
			AddFormDataDTO dto =  dao.getAddformDataDTOById(id);
			//记录日志
			SysLogUtil.log4Query(dto);
			return dto;
		}catch(Exception e){
			logger.error("getAddformDataDTOById出错：", e);
			throw new DaoException("",e);
		}
	}
	
	//更新数据
	public String updateStructureManage(AddFormDataDTO dto) throws Exception{
		
		try {
			 dao.updateStructureManage(dto);
			 return dto.getReturnString();
		} catch (Exception e) {
			logger.error("updatesStructureManage出错：", e);
			throw new DaoException(e.getMessage(),e);
		}
		
	}
	
	//删除数据
	public Map<String, Object> deleteStructuralRelationship(String[] ids) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", ids[0]);
		map.put("pId", ids[1]);
	    dao.deleteStructureManage(map);
		return map;
	}

	//按照父id查询Ztree数据
		public List<ZtreeNodesDTO> getZtreeStructuralRelationshipByParentStrId(String parentId,int level){
			List<ZtreeNodesDTO> tree = new ArrayList<ZtreeNodesDTO>();
			if (level == 0) {
				return null;
			}
			level--;
			
			List<Map<String, Object>> subTrees = dao.getStructuralRelationshipByParentStrId(parentId);
			
			for (Map<String, Object> map : subTrees) {
				ZtreeNodesDTO node = new ZtreeNodesDTO();
				node.setpId(map.get("ParentStrId").toString());
				String id = map.get("StrId").toString();
				String tabId = map.get("id").toString();
				node.setId(id);
				node.setTabId(tabId);
				node.setName(map.get("ClassCode").toString());
				HashMap<String, Object> attr = new HashMap<String, Object>(1);
				Integer count = Integer.valueOf(map.get("childCount").toString());
				attr.put("count",count);
				node.setAttributes(attr);
				if (count > 0) {
					if (count > 0) {
						node.setOpen("true");
						node.setIsParent("true");
						node.setIcon("static/js/platform/component/zTree/css/zTreeStyle/img/diy/chilun2.png");
					} else {
						node.setOpen("false");
					}
					node.setChildren(this.getZtreeStructuralRelationshipByParentStrId(id,level));
				} else {
					node.setIcon("static/js/platform/component/zTree/css/zTreeStyle/img/diy/chilun3.png");
					node.setOpen("open");
				}
				tree.add(node);
			}
			return tree;
		}

		/**
		    * 根据vci编号查询零件id集合
		    * @author xul
		    * */
		public List<String> getStrIdByCode(String code){
			List<String> ids = dao.getStrIdByCode(code);
			return ids;
		}

		
		//判断用户添加的零件是否存在
		public AddFormDataDTO findStrIsHasByclassCodeNew(String classCodeNew) throws Exception{
			try {
				return dao.findStrIsHasByclassCodeNew(classCodeNew);
			} catch (Exception e) {
				logger.error("findStrIsHasById出错：",e);
				throw new DaoException("",e);
			}
		}
		
		//保存拖拽后的数据结构
		public void toSaveDragNode(String[] ids) {
			Map<String, Object>  map = new HashMap<String, Object>();
			try {
				 map.put("targetNodePid", ids[0]);
				 map.put("tabId", ids[1]);
				 //map.put("nodeParentId", ids[2]);
				 dao.toSaveDragNode(map);
			} catch (Exception e) {
				logger.error("toSaveDragNode出错：",e);
				throw new DaoException("",e);
			}
		}
		
		 //查询vci树
		public List<ZtreeNodesDTO> getZtreeStructuralRelationshipBySerchData(int level, AddFormDataDTO serchData) {
			List<ZtreeNodesDTO> tree = new ArrayList<ZtreeNodesDTO>();
			if (level == 0) {
				return null;
			}
			level--;
			List<Map<String, Object>> subTrees = dao.getZtreeStructuralRelationshipBySerchData(serchData);
			
			for (Map<String, Object> map : subTrees) {
				ZtreeNodesDTO node = new ZtreeNodesDTO();
				node.setpId(map.get("ParentStrId").toString());
				String id = map.get("StrId").toString();
				String tabId = map.get("id").toString();
				node.setId(id);
				node.setTabId(tabId);
				node.setName(map.get("ClassCode").toString());
				node.setIcon("static/js/platform/component/zTree/css/zTreeStyle/img/diy/chilun2.png");
				HashMap<String, Object> attr = new HashMap<String, Object>(1);
				Integer count = Integer.valueOf(map.get("childCount").toString());
				attr.put("count",count);
				node.setAttributes(attr);
				if (count > 0) {
					if (count > 0) {
						node.setOpen("true");
						node.setIsParent("true");
					} else {
						node.setOpen("false");
					}
					node.setChildren(this.getZtreeStructuralRelationshipByParentStrId(id,level));
				} else {
					node.setOpen("open");
				}
				tree.add(node);
			}
			return tree;
		}

		//讨论区根据零件id展示vci树
		public List<ZtreeNodesDTO> searchVciZtreeByStrId(String strId)throws Exception{
			
			List<ZtreeNodesDTO> tree = new ArrayList<ZtreeNodesDTO>();
			try {
				List<Map<String, Object>> searchNodes = dao.searchVciZtreeByStrId(strId);
				for(Map<String, Object> map : searchNodes){
					ZtreeNodesDTO node = new ZtreeNodesDTO();
					String id = map.get("StrId").toString();
					String pId = map.get("ParentStrId").toString();
					String classCode = map.get("ClassCode").toString();
					String children = map.get("children").toString();
					node.setId(id);
					node.setpId(pId);
					node.setName(classCode);
					node.setOpen("true");
					if("0".equals(children)){
						node.setIcon("static/js/platform/component/zTree/css/zTreeStyle/img/diy/chilun3.png");
					}else{
						node.setIcon("static/js/platform/component/zTree/css/zTreeStyle/img/diy/chilun2.png");
					}
					tree.add(node);
				}
				return tree;
			} catch (Exception e) {
				logger.error("searchVciZtreeByStrId出错：",e);
				throw e;
			}
		}
}