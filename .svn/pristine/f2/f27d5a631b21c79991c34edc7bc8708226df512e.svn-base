package avicit.discussion_manage.proposalmanage.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import avicit.platform6.api.session.SessionHelper;
import avicit.platform6.api.syspermissionresource.permissionanalysis.core.support.LoaderConstant;
import avicit.platform6.api.sysuser.SysDeptAPI;
import avicit.platform6.api.sysuser.dto.SysUser;
import avicit.platform6.commons.utils.JsonHelper;
import avicit.platform6.core.properties.PlatformConstant.OpResult;
import avicit.platform6.core.rest.msg.PageParameter;
import avicit.platform6.core.rest.msg.QueryReqBean;
import avicit.platform6.core.rest.msg.QueryRespBean;
import avicit.platform6.mgate.domain.avicitconfigxmldomain.Cookie;

import avicit.discussion_manage.proposalmanage.dto.ProposalManageDTO;
import avicit.discussion_manage.proposalmanage.service.ProposalManageService;
import avicit.discussion_manage.structuremanage.service.StructureManageService;

import com.fasterxml.jackson.core.type.TypeReference;

/**
 * @classname: ProposalManageController
 * @description: 定义 建议管理 控制层
 * @author: AVICIT DEV
 */
@Controller
@Scope("prototype")
@RequestMapping("discussion_manage/proposalmanage/ProposalManageController")
public class ProposalManageController implements LoaderConstant {
	private static final Logger logger = LoggerFactory.getLogger(ProposalManageController.class);

	@Autowired
	private ProposalManageService service;
	@Autowired
	private StructureManageService strservice;

	/**
	 * 跳转到管理页面
	 * 
	 * @param request
	 *            请求
	 * @param reponse
	 *            响应
	 * @return
	 */
	@RequestMapping(value = "ProposalManageInfo")
	public ModelAndView toProposalManage(HttpServletRequest request, HttpServletResponse reponse) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("avicit/discussion_manage/proposalmanage/ProposalManageManage");
		request.setAttribute("url", "platform/discussion_manage/proposalmanage/ProposalManageController/operation/");
		return mav;
	}

	@RequestMapping(value = "/operation/getProposalManagesByPage")
	@ResponseBody
	public Map<String, Object> togetProposalManageByPage(PageParameter pageParameter, HttpServletRequest request) {
		QueryReqBean<ProposalManageDTO> queryReqBean = new QueryReqBean<ProposalManageDTO>();
		queryReqBean.setPageParameter(pageParameter);
		HashMap<String, Object> map = new HashMap<String, Object>();
		String json = ServletRequestUtils.getStringParameter(request, "param", "");
		String sfnConditions = ServletRequestUtils.getStringParameter(request, "sdfConditons", "");// 自定义查询条件
		ProposalManageDTO param = null;
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		QueryRespBean<ProposalManageDTO> result = null;
		if (json != null && !"".equals(json)) {
			param = JsonHelper.getInstance().readValue(json, dateFormat, new TypeReference<ProposalManageDTO>() {
			});
			queryReqBean.setSearchParams(param);
		}
		try {
			result = service.searchProposalManageByPage(queryReqBean, sfnConditions);

		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			ex.printStackTrace();
			return map;
		}
		for (ProposalManageDTO dto : result.getResult()) {
			dto.setProposalUserIdAlias(sysUserLoader.getSysUserNameById(dto.getProposalUserId()));
			if (dto.getDeptName() != null && !"".equals(dto.getDeptName())) {
				dto.setDeptName(sysDeptLoader.getSysDeptNameBySysDeptId(dto.getDeptName(),
						SessionHelper.getCurrentLanguageCode(request)));
			} else {
				dto.setDeptName("其它");
			}
			dto.setReplierUserIdAlias(sysUserLoader.getSysUserNameById(dto.getReplierUserId()));
		}
		
		map.put("total", result.getPageParameter().getTotalCount());
		map.put("rows", result.getResult());
		logger.debug("成功获取SysLookupType分页数据");
		return map;
	}

	// 打开编辑或者添加页
	/**
	 * 根据id选择跳转到新建页还是编辑页
	 * 
	 * @param type
	 *            操作类型新建还是编辑
	 * @param id
	 *            编辑数据的id
	 * @param request
	 *            请求
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/{type}/{id}")
	public ModelAndView toOpertionPage(@PathVariable String type, @PathVariable String id, HttpServletRequest request)
			throws Exception {
		ModelAndView mav = new ModelAndView();
		String strId = request.getParameter("strId");
		String classCode = request.getParameter("classCode");
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String currData = dateFormat.format(new Date());
		String str = service.getInfoById();
		if (!"null".equals(id)) {// 编辑窗口或者详细页窗口
			// 主表数据
			// LogBase logBase = LogBaseFactory.getLogBase(request);
			ProposalManageDTO dto = service.queryProposalManageByPrimaryKey(id);

			dto.setProposalUserIdAlias(sysUserLoader.getSysUserNameById(dto.getProposalUserId()));

			dto.setProposalUserDeptAlias(sysDeptLoader.getSysDeptNameBySysDeptId(dto.getProposalUserDept(),
					SessionHelper.getCurrentLanguageCode(request)));

			dto.setReplierUserIdAlias(sysUserLoader.getSysUserNameById(dto.getReplierUserId()));

			request.setAttribute("proposalManageDTO", dto);
		}
		mav.addObject("strId", strId);
		mav.addObject("classCode", classCode);
		mav.addObject("currdate", currData);
		mav.addObject("str", str);

		mav.setViewName("avicit/discussion_manage/proposalmanage/" + "ProposalManage" + type);
		return mav;
	}

	/**
	 * 保存数据
	 * 
	 * @param id
	 *            主键id
	 * @param demoBusinessTripDTO
	 *            保存的对象
	 * @return
	 */
	@RequestMapping(value = "/operation/saveDto", method = RequestMethod.POST)
	public ModelAndView toSaveManageDTO(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		ProposalManageDTO dto = new ProposalManageDTO();
		String strId = ServletRequestUtils.getStringParameter(request, "strId", "");
		try {
			String str = service.getInfoById();
			String applyUserId = SessionHelper.getLoginSysUser(request).getId();
			String applyDeptId = SessionHelper.getCurrentDeptId(request);
			dto.setStrId(strId);
			dto.setProposalCode(str);
			dto.setProposedType("2");
			dto.setProposalName("无建议");
			dto.setProposalUserId(applyUserId);
			dto.setProposalMain("无建议");
			dto.setProposalUserDept(applyDeptId);
			dto.setParentId("-1");
			dto.setPublicationTime(new Date());

			service.insertProposalManage(dto);

			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;

	}

	/**
	 * 保存数据
	 * 
	 * @param id
	 *            主键id
	 * @param demoBusinessTripDTO
	 *            保存的对象
	 * @return
	 */
	@RequestMapping(value = "/operation/save", method = RequestMethod.POST)
	public ModelAndView toSaveProposalManageDTO(HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		String jsonData = ServletRequestUtils.getStringParameter(request, "data", "");
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		try {
			ProposalManageDTO proposalManageDTO = JsonHelper.getInstance().readValue(jsonData, dateFormat,
					new TypeReference<ProposalManageDTO>() {
					});
			if ("".equals(proposalManageDTO.getId())) {// 新增
				service.insertProposalManage(proposalManageDTO);
			} else {// 修改
				service.updateProposalManageSensitive(proposalManageDTO);
			}
			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;

	}

	/**
	 * 按照id批量删除数据
	 * 
	 * @param ids
	 *            id数组
	 * @return
	 */
	@RequestMapping(value = "/operation/delete", method = RequestMethod.POST)
	public ModelAndView toDeleteProposalManageDTO(@RequestBody String[] ids, HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		try {
			// LogBase logBase = LogBaseFactory.getLogBase( request);
			service.deleteProposalManageByIds(ids);
			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;
	}

	/**
	 * 根据id查询讨论区数据
	 * 
	 * @param type
	 *            操作类型新建还是编辑
	 * @param id
	 *            编辑数据的id
	 * @param request
	 *            请求
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/forum")
	public ModelAndView toOpertionForum(HttpServletRequest request) throws Exception {
		ModelAndView mav = new ModelAndView();
		String id = request.getParameter("id");
		try {
			//获取回复数组集合
			List<ProposalManageDTO> dto = service.queryProposalManageByParentId(id);
			//主键查询单条对象
			ProposalManageDTO proposalManageDTO = service.queryProposalManageByPrimaryKey(id);
			for (ProposalManageDTO pro : dto) {//遍历集合，人或部门别名
				pro.setProposalUserIdAlias(sysUserLoader.getSysUserNameById(pro.getProposalUserId()));
				String deptName = sysDeptLoader.getSysDeptNameBySysDeptId(pro.getProposalUserDept(),
						SessionHelper.getCurrentLanguageCode(request));
				pro.setProposalUserDeptAlias(deptName);
				pro.setReplierUserIdAlias(sysUserLoader.getSysUserNameById(pro.getReplierUserId()));
				//根据id获取顶部门名称
				if(!"8a58ab4d4c2141fd014c217cdc5102b6".equals(pro.getProposalUserDept())){
					String deptNameIds = sysDeptLoader.getTopSysDeptNameBySysDeptId(pro.getProposalUserDept(),"zh_CN");
					pro.setDeptNameIds(deptNameIds+"/"+deptName);
				}
				pro.setDeptNameIds(deptName);
				SysUser sysUser = sysUserLoader.getSysUserById(pro.getReplierUserId());
				//手机
				pro.setMobile(sysUser.getMobile()==null?"无":sysUser.getMobile());
				//座机
				pro.setOfficeTel(sysUser.getOfficeTel()==null?"无":sysUser.getOfficeTel());
			}
			//根据零件ID查询零件code
			String strcode = strservice.queryStructureManageByPrimaryKey(proposalManageDTO.getStrId()).getClassCode();
			proposalManageDTO.setStrId(strcode);
			proposalManageDTO.setProposalUserIdAlias(sysUserLoader.getSysUserNameById(proposalManageDTO
					.getProposalUserId()));
			String deptName = sysDeptLoader.getSysDeptNameBySysDeptId(proposalManageDTO.getProposalUserDept(),
							SessionHelper.getCurrentLanguageCode(request));
			proposalManageDTO.setProposalUserDeptAlias(deptName);
			//根据id获取上级部门名称串
			String deptNameIds = sysDeptLoader.getTopSysDeptNameBySysDeptId(proposalManageDTO.getProposalUserDept(),"zh_CN");
			proposalManageDTO.setDeptNameIds(deptNameIds+"/"+deptName);
			SysUser  sysUser = sysUserLoader.getSysUserById(proposalManageDTO.getProposalUserId());
			//手机
			proposalManageDTO.setMobile(sysUser.getMobile()==null?"无":sysUser.getMobile());
			//座机
			proposalManageDTO.setOfficeTel(sysUser.getOfficeTel()==null?"无":sysUser.getOfficeTel());
			mav.addObject("flag", OpResult.success);
			mav.addObject("datas", dto);
			mav.addObject("proposal", proposalManageDTO);
		} catch (Exception e) {
			logger.debug(e.getMessage());
			mav.addObject("error", e.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;
	}
	/**
	 * 讨论区回复数据添加
	 * 
	 * @param applyUserId:回复人,value:回复内容,applyDeptId:回复人专业,time:回复时间,parentId:被回Id
	 *            
	 * @param request
	 *            请求
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/replyAdd")
	public ModelAndView toSaveReplyManageDTO(HttpServletRequest request) throws Exception {
		ModelAndView mav = new ModelAndView();
		String jsonData = ServletRequestUtils.getStringParameter(request, "data", "");
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		try {
			ProposalManageDTO proposalManageDTO = JsonHelper.getInstance().readValue(jsonData, dateFormat,
					new TypeReference<ProposalManageDTO>() {
					});
			String id = service.insertProposalManage(proposalManageDTO);
			
			mav.addObject("flag", OpResult.success);
			mav.addObject("id", id);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;
	}
	/**
	 * 讨论区建议状态改变
	 * 
	 * @param id当前建议id
	 *            
	 * @param request
	 *            请求
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/commonality")
	public ModelAndView toSaveCommonalityManageDTO(HttpServletRequest request) throws Exception {
		ModelAndView mav = new ModelAndView();
		String jsonData = ServletRequestUtils.getStringParameter(request, "data", "");
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		try {
			ProposalManageDTO proposalManageDTO = JsonHelper.getInstance().readValue(jsonData, dateFormat,
					new TypeReference<ProposalManageDTO>() {
			});
			
			
			service.updateProposalManageSensitive(proposalManageDTO);
			
			mav.addObject("flag", OpResult.success);
		} catch (Exception ex) {
			logger.debug(ex.getMessage());
			mav.addObject("error", ex.getMessage());
			mav.addObject("flag", OpResult.failure);
			return mav;
		}
		return mav;
	}
	
	
}
