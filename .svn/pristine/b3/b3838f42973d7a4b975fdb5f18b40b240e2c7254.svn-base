package avicit.discussion_manage.processassignment.service;

import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import avicit.discussion_manage.factorycomplex.dao.FactoryCensorManageDao;
import avicit.discussion_manage.factorycomplex.dao.FactoryComplexDao;
import avicit.discussion_manage.factorycomplex.dto.FactoryCensorManageDTO;
import avicit.discussion_manage.factorycomplex.dto.FactoryComplexDTO;
import avicit.discussion_manage.processassignment.dao.ProcessAssignmentDao;
import avicit.discussion_manage.processassignment.dao.ProcessRouteDao;
import avicit.discussion_manage.processassignment.dto.ProcessAssignmentDTO;
import avicit.discussion_manage.processassignment.dto.ProcessRouteDTO;
import avicit.platform6.api.sysuser.SysDeptAPI;
import avicit.platform6.commons.utils.ComUtil;
import avicit.platform6.commons.utils.PojoUtil;
import avicit.platform6.core.exception.DaoException;
import avicit.platform6.core.mybatis.pagehelper.Page;
import avicit.platform6.core.mybatis.pagehelper.PageHelper;
import avicit.platform6.core.properties.PlatformConstant.OpType;
import avicit.platform6.core.rest.msg.QueryReqBean;
import avicit.platform6.core.rest.msg.QueryRespBean;
import avicit.platform6.core.sfn.intercept.SelfDefinedQuery;
import avicit.platform6.core.spring.SpringFactory;
import avicit.platform6.modules.system.syslog.service.SysLogUtil;

/**
 * @classname: ProcessAssignmentService
 * @description: 定义 工艺分工人员任务表实现类
 * @author: AVICIT DEV
 */
@Service
public class ProcessAssignmentService implements Serializable {

	private static final Logger logger = LoggerFactory.getLogger(ProcessAssignmentService.class);

	private static final long serialVersionUID = 1L;

	// @Autowired
	// private SysLogUtil sysLogUtil;

	@Autowired
	private ProcessAssignmentDao dao;
	@Autowired
	private ProcessRouteDao prodao;
	@Autowired
	private FactoryComplexDao factoryComdao;
	@Autowired
	private FactoryCensorManageDao factoryCendao;

	/**
	 * 按条件分页查询
	 * 
	 * @param queryReqBean
	 * @return
	 * @throws Exception
	 */
	public QueryRespBean<ProcessAssignmentDTO> searchProcessAssignmentByPage(
			QueryReqBean<ProcessAssignmentDTO> queryReqBean, String sfnConditions) throws Exception {
		try {
			PageHelper.startPage(queryReqBean.getPageParameter());
			ProcessAssignmentDTO searchParams = queryReqBean.getSearchParams();
			SelfDefinedQuery sdc = new SelfDefinedQuery(sfnConditions, "t1");
			Page<ProcessAssignmentDTO> dataList = dao.searchProcessAssignmentByPage(searchParams, sdc.parseSql());
			QueryRespBean<ProcessAssignmentDTO> queryRespBean = new QueryRespBean<ProcessAssignmentDTO>();

			queryRespBean.setResult(dataList);
			return queryRespBean;
		} catch (DaoException e) {
			logger.error("searchProcessAssignmentByPaging出错：", e);
			throw e;
		}
	}

	/**
	 * 按条件查询，不分页
	 * 
	 * @param queryReqBean
	 * @return
	 * @throws Exception
	 */
	public List<ProcessAssignmentDTO> searchProcessAssignment(QueryReqBean<ProcessAssignmentDTO> queryReqBean)
			throws Exception {
		try {
			ProcessAssignmentDTO searchParams = queryReqBean.getSearchParams();
			List<ProcessAssignmentDTO> dataList = dao.searchProcessAssignment(searchParams);
			return dataList;
		} catch (Exception e) {
			logger.error("searchProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 通过主键查询单条记录
	 * 
	 * @param id
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public ProcessAssignmentDTO queryProcessAssignmentByPrimaryKey(String id) throws Exception {
		try {
			ProcessAssignmentDTO dto = dao.findProcessAssignmentById(id);
			// 记录日志
			SysLogUtil.log4Query(dto);
			return dto;
		} catch (Exception e) {
			logger.error("searchProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 新增对象
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public String insertProcessAssignment(ProcessAssignmentDTO dto) throws Exception {
		try {
			String id = ComUtil.getId();
			dto.setId(id);
			PojoUtil.setSysProperties(dto, OpType.insert);
			dao.insertProcessAssignment(dto);
			// 记录日志
			SysLogUtil.log4Insert(dto);
			return id;
		} catch (Exception e) {
			logger.error("insertProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 修改对象全部字段
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int updateProcessAssignment(ProcessAssignmentDTO dto) throws Exception {
		// 记录日志
		ProcessAssignmentDTO old = findById(dto.getId());
		SysLogUtil.log4Update(dto, old);
		PojoUtil.setSysProperties(dto, OpType.update);
		PojoUtil.copyProperties(old, dto, true);
		int ret = dao.updateProcessAssignmentAll(old);
		if (ret == 0) {
			throw new DaoException("数据失效，请重新更新");
		}
		return ret;

	}

	/**
	 * 修改对象部分字段
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int updateProcessAssignmentSensitive(ProcessAssignmentDTO dto) throws Exception {
		try {
			// 记录日志
			ProcessAssignmentDTO old = findById(dto.getId());
			SysLogUtil.log4Update(dto, old);
			PojoUtil.setSysProperties(dto, OpType.update);
			PojoUtil.copyProperties(old, dto, true);
			int count = dao.updateProcessAssignmentSensitive(old);
			if (count == 0) {
				throw new DaoException("数据失效，请重新更新");
			}
			return count;
		} catch (Exception e) {
			logger.error("searchDemoBusinessTrip出错：", e);
			throw new DaoException(e.getMessage(), e);
		}

	}

	/**
	 * 按主键单条删除
	 * 
	 * @param id
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int deleteProcessAssignmentById(String id) throws Exception {
		if (StringUtils.isEmpty(id)) {
			throw new Exception("删除失败！传入的参数主键为null");
		}
		try {
			// 记录日志
			SysLogUtil.log4Delete(findById(id));
			return dao.deleteProcessAssignmentById(id);
		} catch (Exception e) {
			logger.error("deleteProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 批量删除数据
	 * 
	 * @param ids
	 *            id的数组
	 * @return
	 * @throws Exception
	 */
	public int deleteProcessAssignmentByIds(String[] ids) throws Exception {
		int result = 0;
		for (String id : ids) {
			deleteProcessAssignmentById(id);
			result++;
		}
		return result;
	}

	/**
	 * 日志专用，内部方法，不再记录日志
	 */
	private ProcessAssignmentDTO findById(String id) throws Exception {
		try {
			ProcessAssignmentDTO dto = dao.findProcessAssignmentById(id);
			return dto;
		} catch (DaoException e) {
			logger.error("findProcessAssignment出错：", e);
			throw e;
		}
	}

	// 按照父id查询tree数据
	public List<Map<String, Object>> gettreeProcessassignmentByStrId(String parentId) {
		try {
			List<Map<String, Object>> tree = dao.gettreeProcessassignmentByStrId(parentId);

			for (Map<String, Object> node : tree) {
				String stid = (String) node.get("strId");
				List<Map<String, Object>> proute = dao.getprocessRoteByStrId(stid);
				if (proute != null && proute.size() > 0) {
					for (int i = 0; i < proute.size(); i++) {
						Map<String, Object> nodes = proute.get(i);
						node.put("routeId", nodes.get("id") == null ? "" : nodes.get("id"));
						node.put("thermalUnit", nodes.get("thermalUnit") == null ? "" : nodes.get("thermalUnit"));
						node.put("manufacturingUnit",
								nodes.get("manufacturingUnit") == null ? "" : nodes.get("manufacturingUnit"));
						node.put("useUnit", nodes.get("useUnit") == null ? "" : nodes.get("useUnit"));
					}
				}
			}
			return tree;
		} catch (DaoException e) {
			logger.error("gettreeProcessassignmentByStrId出错：", e);
			throw e;
		}
	}

	/**
	 * 新增对象
	 * 
	 * @param dto
	 * @return
	 * @throws Exception
	 */
	public int insertProcessRoute(ProcessRouteDTO dto) throws Exception {
		try {
			String id = ComUtil.getId();
			dto.setId(id);
			PojoUtil.setSysProperties(dto, OpType.insert);
			int ret = prodao.insertProcessRoute(dto);
			// 记录日志
			SysLogUtil.log4Insert(dto);
			return ret;
		} catch (Exception e) {
			logger.error("insertProcessRoute出错：", e);
			throw new DaoException("", e);
		}
	}

	/**
	 * 修改对象全部字段
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int updateProcessRoute(ProcessRouteDTO dto) throws Exception {
		// 记录日志
		ProcessRouteDTO old = findByProSid(dto.getStrId());
		SysLogUtil.log4Update(dto, old);
		PojoUtil.setSysProperties(dto, OpType.update);
		PojoUtil.copyProperties(old, dto, true);
		int ret = prodao.updateProcessRouteSensitive(old);
		if (ret == 0) {
			throw new DaoException("数据失效，请重新更新");
		}
		return ret;

	}

	/**
	 * 日志专用，内部方法，不再记录日志
	 */
	private ProcessRouteDTO findByProSid(String id) throws Exception {
		try {
			ProcessRouteDTO dto = prodao.findByProSid(id);
			return dto;
		} catch (DaoException e) {
			logger.error("findProcessRoute出错：", e);
			throw e;
		}
	}

	/**
	 * //去除数组中重复的记录
	 */

	public String[] getrouteList(String[] thUnit) {
		List<String> list = new LinkedList<String>();
		for (int i = 0; i < thUnit.length; i++) {
			if (!list.contains(thUnit[i])) {
				list.add(thUnit[i]);
			}
		}
		return (String[]) list.toArray(new String[list.size()]);
	}

	/**
	 * 查找厂区模板对应记录
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map getworkGroup() {
		Map equTypeMap = new HashMap();// 设备类型
		List list = prodao.getFactoryMap();
		if (null != list && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Map<String, String> map = (Map<String, String>) list.get(i);
				String dept = map.get("dept");
				String user = map.get("user");
				equTypeMap.put(dept, user);
			}
		}
		return equTypeMap;
	}

	/**
	 * 插入路線之前 ，刪除該零件下的路線
	 * 
	 * @throws Exception
	 */
	public void deleteFectoryBySid(String id) throws Exception {
		if (StringUtils.isEmpty(id)) {
			throw new Exception("删除失败！传入的参数主键为null");
		}

		try {
			// 记录日志
			// SysLogUtil.log4Delete(findById(id));
			int comId = dao.findFactoryComById(id);
			if (comId > 0) {
				dao.deleteFactoryComById(id);
			}
			int cenId = dao.findFactoryCenById(id);
			if (cenId > 0) {
				dao.deleteFactoryCenById(id);
			}
		} catch (Exception e) {
			logger.error("delete分工专业以及人员出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	public void insertFectory(FactoryComplexDTO dto) {
		try {
			String id = ComUtil.getId();
			dto.setId(id);
			PojoUtil.setSysProperties(dto, OpType.insert);
			int ret = factoryComdao.insertFactoryComplex(dto);
			if (ret > 0) {
				String user = (String) this.getworkGroup().get(dto.getWorkshopId());
				String[] newuser = user.split(",");
				if (newuser.length > 0) {
					for (int i = 0; i < newuser.length; i++) {
						FactoryCensorManageDTO cendto = new FactoryCensorManageDTO();
						cendto.setStrId(dto.getStrId());
						cendto.setFcId(id);
						cendto.setDutyUserId(newuser[i]);
						String fid = ComUtil.getId();
						cendto.setId(fid);
						PojoUtil.setSysProperties(cendto, OpType.insert);
						factoryCendao.insertFactoryCensorManage(cendto);
					}
				}
			}
			// 记录日志
			SysLogUtil.log4Insert(dto);
		} catch (Exception e) {
			logger.error("insertFactoryComplex出错：", e);
			throw new DaoException("", e);
		}
	}

	public void insertFactoryDto(ProcessRouteDTO demo, String[] thUnit, String type) {
		SysDeptAPI api = SpringFactory.getBean(SysDeptAPI.class);
		// 先刪除該零件對應的路線下的專業以及人員情況
		for (int i = 0; i < thUnit.length; i++) {
			String dept = api.getSysDeptIdByDeptCode(thUnit[i]);
			if (thUnit[i] != null && !"".equals(thUnit[i])) {
				if (dept != null && !"".equals(dept)) {
					FactoryComplexDTO dto = new FactoryComplexDTO();
					dto.setStrId(demo.getStrId());
					dto.setWorkshopId(dept);
					dto.setRouteType(type);
					dto.setTemplate("N");
					SysLogUtil.log4Insert(dto);
					this.insertFectory(dto);
				} else {
					throw new DaoException("专业编号：" + thUnit[i] + "在系统中不存在！");
				}
			}
		}
	}
}
