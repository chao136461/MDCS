package avicit.discussion_manage.processassignment.service;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import avicit.discussion_manage.processassignment.dao.ProcessAssignmentDao;
import avicit.discussion_manage.processassignment.dto.ProcessAssignmentDTO;
import avicit.discussion_manage.processassignment.dto.TreeProcessNodesDTO;
import avicit.discussion_manage.structuralrelationship.dto.ZtreeNodesDTO;
import avicit.platform6.commons.utils.ComUtil;
import avicit.platform6.commons.utils.PojoUtil;
import avicit.platform6.core.exception.DaoException;
import avicit.platform6.core.mybatis.pagehelper.Page;
import avicit.platform6.core.mybatis.pagehelper.PageHelper;
import avicit.platform6.core.properties.PlatformConstant.OpType;
import avicit.platform6.core.rest.msg.QueryReqBean;
import avicit.platform6.core.rest.msg.QueryRespBean;
import avicit.platform6.core.sfn.intercept.SelfDefinedQuery;
import avicit.platform6.modules.system.syslog.service.SysLogUtil;

/**
 * @classname: ProcessAssignmentService
 * @description: 定义 工艺分工人员任务表实现类
 * @author: AVICIT DEV
 */
@Service
public class ProcessAssignmentService implements Serializable {

	private static final Logger logger = LoggerFactory.getLogger(ProcessAssignmentService.class);

	private static final long serialVersionUID = 1L;

	// @Autowired
	// private SysLogUtil sysLogUtil;

	@Autowired
	private ProcessAssignmentDao dao;

	/**
	 * 按条件分页查询
	 * 
	 * @param queryReqBean
	 * @return
	 * @throws Exception
	 */
	public QueryRespBean<ProcessAssignmentDTO> searchProcessAssignmentByPage(
			QueryReqBean<ProcessAssignmentDTO> queryReqBean, String sfnConditions) throws Exception {
		try {
			PageHelper.startPage(queryReqBean.getPageParameter());
			ProcessAssignmentDTO searchParams = queryReqBean.getSearchParams();
			SelfDefinedQuery sdc = new SelfDefinedQuery(sfnConditions, "t1");
			Page<ProcessAssignmentDTO> dataList = dao.searchProcessAssignmentByPage(searchParams, sdc.parseSql());
			QueryRespBean<ProcessAssignmentDTO> queryRespBean = new QueryRespBean<ProcessAssignmentDTO>();

			queryRespBean.setResult(dataList);
			return queryRespBean;
		} catch (DaoException e) {
			logger.error("searchProcessAssignmentByPaging出错：", e);
			throw e;
		}
	}

	/**
	 * 按条件查询，不分页
	 * 
	 * @param queryReqBean
	 * @return
	 * @throws Exception
	 */
	public List<ProcessAssignmentDTO> searchProcessAssignment(QueryReqBean<ProcessAssignmentDTO> queryReqBean)
			throws Exception {
		try {
			ProcessAssignmentDTO searchParams = queryReqBean.getSearchParams();
			List<ProcessAssignmentDTO> dataList = dao.searchProcessAssignment(searchParams);
			return dataList;
		} catch (Exception e) {
			logger.error("searchProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 通过主键查询单条记录
	 * 
	 * @param id
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public ProcessAssignmentDTO queryProcessAssignmentByPrimaryKey(String id) throws Exception {
		try {
			ProcessAssignmentDTO dto = dao.findProcessAssignmentById(id);
			// 记录日志
			SysLogUtil.log4Query(dto);
			return dto;
		} catch (Exception e) {
			logger.error("searchProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 新增对象
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public String insertProcessAssignment(ProcessAssignmentDTO dto) throws Exception {
		try {
			String id = ComUtil.getId();
			dto.setId(id);
			PojoUtil.setSysProperties(dto, OpType.insert);
			dao.insertProcessAssignment(dto);
			// 记录日志
			SysLogUtil.log4Insert(dto);
			return id;
		} catch (Exception e) {
			logger.error("insertProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 修改对象全部字段
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int updateProcessAssignment(ProcessAssignmentDTO dto) throws Exception {
		// 记录日志
		ProcessAssignmentDTO old = findById(dto.getId());
		SysLogUtil.log4Update(dto, old);
		PojoUtil.setSysProperties(dto, OpType.update);
		PojoUtil.copyProperties(old, dto, true);
		int ret = dao.updateProcessAssignmentAll(old);
		if (ret == 0) {
			throw new DaoException("数据失效，请重新更新");
		}
		return ret;

	}

	/**
	 * 修改对象部分字段
	 * 
	 * @param dto
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int updateProcessAssignmentSensitive(ProcessAssignmentDTO dto) throws Exception {
		try {
			// 记录日志
			ProcessAssignmentDTO old = findById(dto.getId());
			SysLogUtil.log4Update(dto, old);
			PojoUtil.setSysProperties(dto, OpType.update);
			PojoUtil.copyProperties(old, dto, true);
			int count = dao.updateProcessAssignmentSensitive(old);
			if (count == 0) {
				throw new DaoException("数据失效，请重新更新");
			}
			return count;
		} catch (Exception e) {
			logger.error("searchDemoBusinessTrip出错：", e);
			throw new DaoException(e.getMessage(), e);
		}

	}

	/**
	 * 按主键单条删除
	 * 
	 * @param id
	 * @param logBase
	 * @return
	 * @throws Exception
	 */
	public int deleteProcessAssignmentById(String id) throws Exception {
		if (StringUtils.isEmpty(id)) {
			throw new Exception("删除失败！传入的参数主键为null");
		}
		try {
			// 记录日志
			SysLogUtil.log4Delete(findById(id));
			return dao.deleteProcessAssignmentById(id);
		} catch (Exception e) {
			logger.error("deleteProcessAssignment出错：", e);
			throw new DaoException(e.getMessage(), e);
		}
	}

	/**
	 * 批量删除数据
	 * 
	 * @param ids
	 *            id的数组
	 * @return
	 * @throws Exception
	 */
	public int deleteProcessAssignmentByIds(String[] ids) throws Exception {
		int result = 0;
		for (String id : ids) {
			deleteProcessAssignmentById(id);
			result++;
		}
		return result;
	}

	/**
	 * 日志专用，内部方法，不再记录日志
	 */
	private ProcessAssignmentDTO findById(String id) throws Exception {
		try {
			ProcessAssignmentDTO dto = dao.findProcessAssignmentById(id);
			return dto;
		} catch (DaoException e) {
			logger.error("findProcessAssignment出错：", e);
			throw e;
		}
	}

	// 按照父id查询tree数据
	public List<Map<String, Object>> gettreeProcessassignmentByStrId(String parentId) {
		try {
			List<Map<String, Object>> tree = dao.gettreeProcessassignmentByStrId(parentId);

			for (Map<String, Object> node : tree) {
				String stid = (String) node.get("StrId");
				List<Map<String, Object>> proute = dao.getprocessRoteByStrId(stid);
				if (proute != null && proute.size() > 0) {
					for (int i = 0; i < proute.size(); i++) {
						Map<String, Object> nodes = proute.get(i);
						node.put("routeId", nodes.get("id") == null ? "" : nodes.get("id"));
						node.put("thermalUnit", nodes.get("thermalUnit") == null ? "" : nodes.get("thermalUnit"));
						node.put("manufacturingUnit",
								nodes.get("manufacturingUnit") == null ? "" : nodes.get("manufacturingUnit"));
						node.put("useUnit", nodes.get("useUnit") == null ? "" : nodes.get("useUnit"));
					}
				}
			}
			return tree;
		} catch (DaoException e) {
			logger.error("gettreeProcessassignmentByStrId出错：", e);
			throw e;
		}
	}

}
